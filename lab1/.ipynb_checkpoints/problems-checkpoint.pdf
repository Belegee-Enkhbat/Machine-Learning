{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "f7e412a4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10\n"
     ]
    }
   ],
   "source": [
    "# 1. Өгөгдсөн хүснэгтээс нийт ялгаатай утгатай элемэнтүүдийн тоог ол.\n",
    "def removeDuplicateLetters(s):\n",
    "        \n",
    "\t\tlast_occ = {}\n",
    "\t\tstack = []\n",
    "\t\tvisited = set()\n",
    "\n",
    "\t\tfor i in range(len(s)):\n",
    "\t\t\tlast_occ[s[i]] = i\t\t\n",
    "\t\tfor i in range(len(s)):\n",
    "\t\t\tif s[i] not in visited:\n",
    "\t\t\t\twhile (stack and stack[-1] > s[i] and last_occ[stack[-1]] > i):\n",
    "\t\t\t\t\tvisited.remove(stack.pop())\n",
    "\t\t\t\tstack.append(s[i])\n",
    "\t\t\t\tvisited.add(s[i])\n",
    "\t\treturn ''.join(stack)\n",
    "\n",
    "print(len(removeDuplicateLetters(\"abcdamsanfjkksadjsa\")))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "3ebc062d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The cat sat on the mat and the dog barked at the cat\n",
      "Counted: {'sat': 1, 'on': 1, 'dog': 1, 'and': 1, 'cat': 2, 'mat': 1, 'The': 1, 'barked': 1, 'at': 1, 'the': 3}\n"
     ]
    }
   ],
   "source": [
    "# 2. Өгөгдсөн өгүүлбэрийн үг бүр нь хэдэн удаа давтагдсанг ол.\n",
    "sentence = \"The cat sat on the mat and the dog barked at the cat\"\n",
    "words = sentence.split()\n",
    "unique_words = set(words)\n",
    "word_counts = {}\n",
    "for word in unique_words:\n",
    "    count = words.count(word)\n",
    "    word_counts[word] = count\n",
    "print(sentence)\n",
    "print(\"Counted:\", word_counts)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "5533b9fb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sjkaxyz\n",
      "xyz\n"
     ]
    }
   ],
   "source": [
    "\n",
    "# 3. Өгөгдсөн хүснэгтээс 'xyz' тэмдэгт мөрийг агуулсан тэмдэгт мөрүүдийг хэвлэ.\n",
    "data = 'hello sjkaxyz bataa xyz'\n",
    "words = data.split()\n",
    "for word in words:\n",
    "    if 'xyz' in word:\n",
    "        print(word)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "a5c75860",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sjkaxyz\n",
      "xyz\n",
      "xyzbataa\n"
     ]
    }
   ],
   "source": [
    "# 4. Өгөгдсөн хүснэгтээс 'xyz' тэмдэгт мөрөөр эхэлсэн эсвэл төгссөн тэмдэгт мөрүүдийг хэвлэ.\n",
    "\n",
    "data = 'hello sjkaxyz bataa xyz xyzbataa bxyza'\n",
    "words = data.split()\n",
    "for word in words:\n",
    "    if word.startswith('xyz') or word.endswith('xyz'):\n",
    "        print(word)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "3f78c6e6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2, 3, 4, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227]\n"
     ]
    }
   ],
   "source": [
    "# 5. Хамгийн эхний анхны 50 тоог олох функц бич.\n",
    "def is_prime(n):\n",
    "    if n < 2:\n",
    "        return False\n",
    "    for i in range(2, int((n+1)/2)):\n",
    "        if n % i == 0:\n",
    "            return False\n",
    "    return True\n",
    "\n",
    "def get_primes(n):\n",
    "    primes = []\n",
    "    i = 2\n",
    "    while len(primes) < n:\n",
    "        if is_prime(i):\n",
    "            primes.append(i)\n",
    "        i += 1\n",
    "    return primes\n",
    "\n",
    "print(get_primes(50))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a3284425",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
